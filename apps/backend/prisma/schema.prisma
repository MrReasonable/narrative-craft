// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DB_CLIENT_URL")
}

enum Role {
  OWNER
  STORYTELLER
  PLAYER
  READER
}

model User {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  username        String?            @unique
  email           String             @unique
  password        String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  campaigns       UserCampaignRole[]
  userJournalRole UserJournalRole[]
}

model UserCampaignRole {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  role       Role
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String   @db.ObjectId
}

model UserJournalRole {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  role      Role
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  journal   Journal @relation(fields: [journalId], references: [id])
  journalId String  @db.ObjectId
}

model Campaign {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  ownerId     String             @db.ObjectId
  scenes      Scene[]
  users       UserCampaignRole[]
  Journal     Journal[]
}

model SceneLink {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  scene    Scene  @relation(name: "origin", fields: [sceneId], references: [id])
  sceneId  String @db.ObjectId
  target   Scene  @relation(name: "target", fields: [targetId], references: [id])
  targetId String @db.ObjectId
}

model Scene {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  campaign    Campaign    @relation(fields: [campaignId], references: [id])
  campaignId  String      @db.ObjectId
  origin      SceneLink[] @relation(name: "target")
  targets     SceneLink[] @relation(name: "origin")
}

model SceneObject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  name      String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Journal {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  content         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userJournalRole UserJournalRole[]
  campaign        Campaign          @relation(fields: [campaignId], references: [id])
  campaignId      String            @db.ObjectId
}
